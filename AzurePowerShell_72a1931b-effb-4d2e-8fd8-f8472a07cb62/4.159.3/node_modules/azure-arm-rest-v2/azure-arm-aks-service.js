"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tl = require("azure-pipelines-task-lib/task");
const webClient = require("./webClient");
const AzureServiceClient_1 = require("./AzureServiceClient");
const AzureServiceClientBase_1 = require("./AzureServiceClientBase");
class AzureAksService {
    constructor(endpoint) {
        this._client = new AzureServiceClient_1.ServiceClient(endpoint.applicationTokenCredentials, endpoint.subscriptionID, 30);
    }
    beginRequest(uri, parameters) {
        var webRequest = new webClient.WebRequest();
        webRequest.method = 'GET';
        webRequest.uri = this._client.getRequestUri(uri, parameters, null, '2017-08-31');
        return this._client.beginRequestExpBackoff(webRequest, 3).then((response) => {
            if (response.statusCode >= 200 && response.statusCode < 300) {
                return response;
            }
            else {
                throw AzureServiceClientBase_1.ToError(response);
            }
        });
    }
    getAccessProfile(resourceGroup, clusterName, useClusterAdmin) {
        var accessProfileName = !!useClusterAdmin ? 'clusterAdmin' : 'clusterUser';
        return this.beginRequest(`//subscriptions/{subscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{ClusterName}/accessProfiles/{AccessProfileName}`, {
            '{ResourceGroupName}': resourceGroup,
            '{ClusterName}': clusterName,
            '{AccessProfileName}': accessProfileName
        }).then((response) => {
            return response.body;
        }, (reason) => {
            throw Error(tl.loc('CantDownloadAccessProfile', clusterName, this._client.getFormattedError(reason)));
        });
    }
}
exports.AzureAksService = AzureAksService;
