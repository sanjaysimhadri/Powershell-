"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tl = require("azure-pipelines-task-lib/task");
const azureServiceClientBase = require("./AzureServiceClientBase");
const depolymentsBase = require("./DeploymentsBase");
class SubscriptionManagementClient extends azureServiceClientBase.AzureServiceClientBase {
    constructor(credentials, subscriptionId, options) {
        super(credentials);
        this.validateInputs(subscriptionId);
        this.apiVersion = '2019-05-10';
        this.acceptLanguage = 'en-US';
        this.generateClientRequestId = true;
        if (!!options && !!options.longRunningOperationRetryTimeout) {
            this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
        }
        this.deployments = new SubscriptionDeployments(this);
        this.subscriptionId = subscriptionId;
    }
    getRequestUri(uriFormat, parameters, queryParameters, apiVersion) {
        parameters['{subscriptionId}'] = encodeURIComponent(this.subscriptionId);
        return super.getRequestUriForBaseUri(this.baseUri, uriFormat, parameters, queryParameters, apiVersion);
    }
    validateInputs(subscriptionId) {
        if (!subscriptionId) {
            throw new Error(tl.loc("SubscriptionIdCannotBeNull"));
        }
    }
}
exports.SubscriptionManagementClient = SubscriptionManagementClient;
class SubscriptionDeployments extends depolymentsBase.DeploymentsBase {
    constructor(client) {
        super(client);
        this.client = client;
    }
    createOrUpdate(deploymentParameters, parameters, callback) {
        // Create HTTP request uri
        var uri = this.client.getRequestUri('//subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}', {
            '{deploymentName}': deploymentParameters
        });
        super.deployTemplate(uri, deploymentParameters, parameters, callback);
    }
    validate(deploymentParameters, parameters, callback) {
        // Create HTTP request uri
        var uri = this.client.getRequestUri('//subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate', {
            '{deploymentName}': deploymentParameters
        });
        super.validateTemplate(uri, deploymentParameters, parameters, callback);
    }
}
exports.SubscriptionDeployments = SubscriptionDeployments;
