"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const tl = require("azure-pipelines-task-lib/task");
const webClient = require("./webClient");
const AzureServiceClient_1 = require("./AzureServiceClient");
const AzureServiceClientBase_1 = require("./AzureServiceClientBase");
const constants = require("./constants");
var parseString = require('xml2js').parseString;
class AzureAppService {
    constructor(endpoint, resourceGroup, name, slot, appKind) {
        this._client = new AzureServiceClient_1.ServiceClient(endpoint.applicationTokenCredentials, endpoint.subscriptionID, 30);
        this._resourceGroup = resourceGroup;
        this._name = name;
        this._slot = (slot && slot.toLowerCase() == constants.productionSlot) ? null : slot;
        this._appKind = appKind;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var webRequest = new webClient.WebRequest();
                webRequest.method = 'POST';
                var slotUrl = !!this._slot ? `/slots/${this._slot}` : '';
                webRequest.uri = this._client.getRequestUri(`//subscriptions/{subscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Web/sites/{name}/${slotUrl}/start`, {
                    '{ResourceGroupName}': this._resourceGroup,
                    '{name}': this._name
                }, null, '2016-08-01');
                console.log(tl.loc('StartingAppService', this._getFormattedName()));
                var response = yield this._client.beginRequest(webRequest);
                if (response.statusCode != 200) {
                    throw AzureServiceClientBase_1.ToError(response);
                }
                console.log(tl.loc('StartedAppService', this._getFormattedName()));
            }
            catch (error) {
                throw Error(tl.loc('FailedToStartAppService', this._getFormattedName(), this._client.getFormattedError(error)));
            }
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var webRequest = new webClient.WebRequest();
                webRequest.method = 'POST';
                var slotUrl = !!this._slot ? `/slots/${this._slot}` : '';
                webRequest.uri = this._client.getRequestUri(`//subscriptions/{subscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Web/sites/{name}/${slotUrl}/stop`, {
                    '{ResourceGroupName}': this._resourceGroup,
                    '{name}': this._name
                }, null, '2016-08-01');
                console.log(tl.loc('StoppingAppService', this._getFormattedName()));
                var response = yield this._client.beginRequest(webRequest);
                if (response.statusCode != 200) {
                    throw AzureServiceClientBase_1.ToError(response);
                }
                console.log(tl.loc('StoppedAppService', this._getFormattedName()));
            }
            catch (error) {
                throw Error(tl.loc('FailedToStopAppService', this._getFormattedName(), this._client.getFormattedError(error)));
            }
        });
    }
    restart() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var webRequest = new webClient.WebRequest();
                webRequest.method = 'POST';
                var slotUrl = !!this._slot ? `/slots/${this._slot}` : '';
                webRequest.uri = this._client.getRequestUri(`//subscriptions/{subscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Web/sites/{name}/${slotUrl}/restart`, {
                    '{ResourceGroupName}': this._resourceGroup,
                    '{name}': this._name
                }, null, '2016-08-01');
                console.log(tl.loc('RestartingAppService', this._getFormattedName()));
                var response = yield this._client.beginRequest(webRequest);
                if (response.statusCode != 200) {
                    throw AzureServiceClientBase_1.ToError(response);
                }
                console.log(tl.loc('RestartedAppService', this._getFormattedName()));
            }
            catch (error) {
                throw Error(tl.loc('FailedToRestartAppService', this._getFormattedName(), this._client.getFormattedError(error)));
            }
        });
    }
    delete() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var webRequest = new webClient.WebRequest();
                webRequest.method = 'DELETE';
                var slotUrl = !!this._slot ? `/slots/${this._slot}` : '';
                webRequest.uri = this._client.getRequestUri(`//subscriptions/{subscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Web/sites/{name}/${slotUrl}`, {
                    '{ResourceGroupName}': this._resourceGroup,
                    '{name}': this._name
                }, null, '2016-08-01');
                console.log(tl.loc('DeletingAppServiceSlot', this._getFormattedName()));
                var response = yield this._client.beginRequest(webRequest);
                if (response.statusCode != 200) {
                    throw AzureServiceClientBase_1.ToError(response);
                }
                console.log(tl.loc('DeletedAppServiceSlot', this._getFormattedName()));
            }
            catch (error) {
                throw Error(tl.loc('FailedToDeleteAppServiceSlot', this._getFormattedName(), this._client.getFormattedError(error)));
            }
        });
    }
    swap(slotName, preserveVNet) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var webRequest = new webClient.WebRequest();
                webRequest.method = 'POST';
                webRequest.body = JSON.stringify({
                    targetSlot: slotName,
                    preserveVnet: preserveVNet
                });
                var slotUrl = !!this._slot ? `/slots/${this._slot}` : '';
                webRequest.uri = this._client.getRequestUri(`//subscriptions/{subscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Web/sites/{name}/${slotUrl}/slotsswap`, {
                    '{ResourceGroupName}': this._resourceGroup,
                    '{name}': this._name,
                    '{slotUrl}': slotUrl
                }, null, '2016-08-01');
                console.log(tl.loc('SwappingAppServiceSlotSlots', this._name, this.getSlot(), slotName));
                var response = yield this._client.beginRequest(webRequest);
                if (response.statusCode == 202) {
                    response = yield this._client.getLongRunningOperationResult(response);
                }
                if (response.statusCode != 200) {
                    throw AzureServiceClientBase_1.ToError(response);
                }
                console.log(tl.loc('SwappedAppServiceSlotSlots', this._name, this.getSlot(), slotName));
            }
            catch (error) {
                throw Error(tl.loc('FailedToSwapAppServiceSlotSlots', this._name, this.getSlot(), slotName, this._client.getFormattedError(error)));
            }
        });
    }
    swapSlotWithPreview(slotName, preserveVNet) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var webRequest = new webClient.WebRequest();
                webRequest.method = 'POST';
                webRequest.body = JSON.stringify({
                    targetSlot: slotName,
                    preserveVnet: preserveVNet
                });
                var slotUrl = !!this._slot ? `/slots/${this._slot}` : '';
                webRequest.uri = this._client.getRequestUri(`//subscriptions/{subscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Web/sites/{name}/${slotUrl}/applySlotConfig`, {
                    '{ResourceGroupName}': this._resourceGroup,
                    '{name}': this._name,
                    '{slotUrl}': slotUrl
                }, null, '2016-08-01');
                console.log(tl.loc('SwappingAppServiceSlotSlotsPhase1', this._name, this.getSlot(), slotName));
                var response = yield this._client.beginRequest(webRequest);
                if (response.statusCode != 200) {
                    throw AzureServiceClientBase_1.ToError(response);
                }
                console.log(tl.loc('SwappedAppServiceSlotSlotsPhase1', this._name, this.getSlot(), slotName));
                console.log(tl.loc('PreviewSwapPhase1', this._name, this.getSlot()));
            }
            catch (error) {
                throw Error(tl.loc('FailedToSwapAppServiceSlotSlotsPhase1', this._name, this.getSlot(), slotName, this._client.getFormattedError(error)));
            }
        });
    }
    cancelSwapSlotWithPreview() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var webRequest = new webClient.WebRequest();
                webRequest.method = 'POST';
                var slotUrl = !!this._slot ? `/slots/${this._slot}` : '';
                webRequest.uri = this._client.getRequestUri(`//subscriptions/{subscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Web/sites/{name}/${slotUrl}/resetSlotConfig`, {
                    '{ResourceGroupName}': this._resourceGroup,
                    '{name}': this._name,
                    '{slotUrl}': slotUrl
                }, null, '2016-08-01');
                console.log(tl.loc('CancelSwapAppServiceSlotSlotsPhase1', this._name, this.getSlot()));
                var response = yield this._client.beginRequest(webRequest);
                if (response.statusCode != 200) {
                    throw AzureServiceClientBase_1.ToError(response);
                }
                console.log(tl.loc('CancelledSwapAppServiceSlotSlotsPhase1', this._name, this.getSlot()));
            }
            catch (error) {
                throw Error(tl.loc('FailedToCancelSwapAppServiceSlotSlotsPhase1', this._name, this.getSlot(), this._client.getFormattedError(error)));
            }
        });
    }
    get(force) {
        return __awaiter(this, void 0, void 0, function* () {
            if (force || !this._appServiceConfigurationDetails) {
                this._appServiceConfigurationDetails = yield this._get();
            }
            return this._appServiceConfigurationDetails;
        });
    }
    getPublishingProfileWithSecrets(force) {
        return __awaiter(this, void 0, void 0, function* () {
            if (force || !this._appServicePublishingProfile) {
                this._appServicePublishingProfile = yield this._getPublishingProfileWithSecrets();
            }
            return this._appServicePublishingProfile;
        });
    }
    getPublishingCredentials() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var httpRequest = new webClient.WebRequest();
                httpRequest.method = 'POST';
                var slotUrl = !!this._slot ? `/slots/${this._slot}` : '';
                httpRequest.uri = this._client.getRequestUri(`//subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/${slotUrl}/config/publishingcredentials/list`, {
                    '{resourceGroupName}': this._resourceGroup,
                    '{name}': this._name,
                }, null, '2016-08-01');
                var response = yield this._client.beginRequest(httpRequest);
                if (response.statusCode != 200) {
                    throw AzureServiceClientBase_1.ToError(response);
                }
                return response.body;
            }
            catch (error) {
                throw Error(tl.loc('FailedToGetAppServicePublishingCredentials', this._getFormattedName(), this._client.getFormattedError(error)));
            }
        });
    }
    getApplicationSettings(force) {
        return __awaiter(this, void 0, void 0, function* () {
            if (force || !this._appServiceApplicationSetings) {
                this._appServiceApplicationSetings = yield this._getApplicationSettings();
            }
            return this._appServiceApplicationSetings;
        });
    }
    updateApplicationSettings(applicationSettings) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var httpRequest = new webClient.WebRequest();
                httpRequest.method = 'PUT';
                httpRequest.body = JSON.stringify(applicationSettings);
                var slotUrl = !!this._slot ? `/slots/${this._slot}` : '';
                httpRequest.uri = this._client.getRequestUri(`//subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/${slotUrl}/config/appsettings`, {
                    '{resourceGroupName}': this._resourceGroup,
                    '{name}': this._name,
                }, null, '2016-08-01');
                var response = yield this._client.beginRequest(httpRequest);
                if (response.statusCode != 200) {
                    throw AzureServiceClientBase_1.ToError(response);
                }
                return response.body;
            }
            catch (error) {
                throw Error(tl.loc('FailedToUpdateAppServiceApplicationSettings', this._getFormattedName(), this._client.getFormattedError(error)));
            }
        });
    }
    patchApplicationSettings(addProperties, deleteProperties) {
        return __awaiter(this, void 0, void 0, function* () {
            var applicationSettings = yield this.getApplicationSettings();
            var isNewValueUpdated = false;
            for (var key in addProperties) {
                if (applicationSettings.properties[key] != addProperties[key]) {
                    tl.debug(`old value : ${applicationSettings.properties[key]}. new value: ${addProperties[key]}`);
                    isNewValueUpdated = true;
                }
                applicationSettings.properties[key] = addProperties[key];
            }
            for (var key in deleteProperties) {
                if (key in applicationSettings.properties) {
                    delete applicationSettings.properties[key];
                    tl.debug(`Removing app setting : ${key}`);
                    isNewValueUpdated = true;
                }
            }
            if (isNewValueUpdated) {
                yield this.updateApplicationSettings(applicationSettings);
            }
            return isNewValueUpdated;
        });
    }
    getConfiguration() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var httpRequest = new webClient.WebRequest();
                httpRequest.method = 'GET';
                var slotUrl = !!this._slot ? `/slots/${this._slot}` : '';
                httpRequest.uri = this._client.getRequestUri(`//subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/${slotUrl}/config/web`, {
                    '{resourceGroupName}': this._resourceGroup,
                    '{name}': this._name,
                }, null, '2016-08-01');
                var response = yield this._client.beginRequest(httpRequest);
                if (response.statusCode != 200) {
                    throw AzureServiceClientBase_1.ToError(response);
                }
                return response.body;
            }
            catch (error) {
                throw Error(tl.loc('FailedToGetAppServiceConfiguration', this._getFormattedName(), this._client.getFormattedError(error)));
            }
        });
    }
    updateConfiguration(applicationSettings) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var httpRequest = new webClient.WebRequest();
                httpRequest.method = 'PUT';
                httpRequest.body = JSON.stringify(applicationSettings);
                var slotUrl = !!this._slot ? `/slots/${this._slot}` : '';
                httpRequest.uri = this._client.getRequestUri(`//subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/${slotUrl}/config/web`, {
                    '{resourceGroupName}': this._resourceGroup,
                    '{name}': this._name,
                }, null, '2018-02-01');
                var response = yield this._client.beginRequest(httpRequest);
                if (response.statusCode != 200) {
                    throw AzureServiceClientBase_1.ToError(response);
                }
                return response.body;
            }
            catch (error) {
                throw Error(tl.loc('FailedToUpdateAppServiceConfiguration', this._getFormattedName(), this._client.getFormattedError(error)));
            }
        });
    }
    patchConfiguration(properties) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var httpRequest = new webClient.WebRequest();
                httpRequest.method = 'PATCH';
                httpRequest.body = JSON.stringify(properties);
                var slotUrl = !!this._slot ? `/slots/${this._slot}` : '';
                httpRequest.uri = this._client.getRequestUri(`//subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/${slotUrl}/config/web`, {
                    '{resourceGroupName}': this._resourceGroup,
                    '{name}': this._name,
                }, null, '2016-08-01');
                var response = yield this._client.beginRequest(httpRequest);
                if (response.statusCode != 200) {
                    throw AzureServiceClientBase_1.ToError(response);
                }
                return response.body;
            }
            catch (error) {
                throw Error(tl.loc('FailedToPatchAppServiceConfiguration', this._getFormattedName(), this._client.getFormattedError(error)));
            }
        });
    }
    getMetadata() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var httpRequest = new webClient.WebRequest();
                httpRequest.method = 'POST';
                var slotUrl = !!this._slot ? `/slots/${this._slot}` : '';
                httpRequest.uri = this._client.getRequestUri(`//subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/${slotUrl}/config/metadata/list`, {
                    '{resourceGroupName}': this._resourceGroup,
                    '{name}': this._name,
                }, null, '2016-08-01');
                var response = yield this._client.beginRequest(httpRequest);
                if (response.statusCode != 200) {
                    throw AzureServiceClientBase_1.ToError(response);
                }
                return response.body;
            }
            catch (error) {
                throw Error(tl.loc('FailedToGetAppServiceMetadata', this._getFormattedName(), this._client.getFormattedError(error)));
            }
        });
    }
    updateMetadata(applicationSettings) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var httpRequest = new webClient.WebRequest();
                httpRequest.method = 'PUT';
                httpRequest.body = JSON.stringify(applicationSettings);
                var slotUrl = !!this._slot ? `/slots/${this._slot}` : '';
                httpRequest.uri = this._client.getRequestUri(`//subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/${slotUrl}/config/metadata`, {
                    '{resourceGroupName}': this._resourceGroup,
                    '{name}': this._name,
                }, null, '2016-08-01');
                var response = yield this._client.beginRequest(httpRequest);
                if (response.statusCode != 200) {
                    throw AzureServiceClientBase_1.ToError(response);
                }
                return response.body;
            }
            catch (error) {
                throw Error(tl.loc('FailedToUpdateAppServiceMetadata', this._getFormattedName(), this._client.getFormattedError(error)));
            }
        });
    }
    patchMetadata(properties) {
        return __awaiter(this, void 0, void 0, function* () {
            var applicationSettings = yield this.getMetadata();
            for (var key in properties) {
                applicationSettings.properties[key] = properties[key];
            }
            yield this.updateMetadata(applicationSettings);
        });
    }
    getSlot() {
        return this._slot ? this._slot : "production";
    }
    _getPublishingProfileWithSecrets() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var httpRequest = new webClient.WebRequest();
                httpRequest.method = 'POST';
                var slotUrl = !!this._slot ? `/slots/${this._slot}` : '';
                httpRequest.uri = this._client.getRequestUri(`//subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/${slotUrl}/publishxml`, {
                    '{resourceGroupName}': this._resourceGroup,
                    '{name}': this._name,
                }, null, '2016-08-01');
                var response = yield this._client.beginRequest(httpRequest);
                if (response.statusCode != 200) {
                    throw AzureServiceClientBase_1.ToError(response);
                }
                var publishingProfile = response.body;
                return publishingProfile;
            }
            catch (error) {
                throw Error(tl.loc('FailedToGetAppServicePublishingProfile', this._getFormattedName(), this._client.getFormattedError(error)));
            }
        });
    }
    _getApplicationSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var httpRequest = new webClient.WebRequest();
                httpRequest.method = 'POST';
                var slotUrl = !!this._slot ? `/slots/${this._slot}` : '';
                httpRequest.uri = this._client.getRequestUri(`//subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/${slotUrl}/config/appsettings/list`, {
                    '{resourceGroupName}': this._resourceGroup,
                    '{name}': this._name,
                }, null, '2016-08-01');
                var response = yield this._client.beginRequest(httpRequest);
                if (response.statusCode != 200) {
                    throw AzureServiceClientBase_1.ToError(response);
                }
                return response.body;
            }
            catch (error) {
                throw Error(tl.loc('FailedToGetAppServiceApplicationSettings', this._getFormattedName(), this._client.getFormattedError(error)));
            }
        });
    }
    _get() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                var httpRequest = new webClient.WebRequest();
                httpRequest.method = 'GET';
                var slotUrl = !!this._slot ? `/slots/${this._slot}` : '';
                httpRequest.uri = this._client.getRequestUri(`//subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/${slotUrl}`, {
                    '{resourceGroupName}': this._resourceGroup,
                    '{name}': this._name,
                }, null, '2016-08-01');
                var response = yield this._client.beginRequest(httpRequest);
                if (response.statusCode != 200) {
                    throw AzureServiceClientBase_1.ToError(response);
                }
                var appDetails = response.body;
                return appDetails;
            }
            catch (error) {
                throw Error(tl.loc('FailedToGetAppServiceDetails', this._getFormattedName(), this._client.getFormattedError(error)));
            }
        });
    }
    _getFormattedName() {
        return this._slot ? `${this._name}-${this._slot}` : this._name;
    }
    getName() {
        return this._name;
    }
}
exports.AzureAppService = AzureAppService;
